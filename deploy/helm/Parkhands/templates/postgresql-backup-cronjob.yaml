---
#This is a job to create database backups and store them on a S3 bucket and/or via Minio at some block storage
#Only perform backups for production and staging
{{- if or (eq .Values.migrateEnvVars.cicdNamespace "production") (eq .Values.migrateEnvVars.cicdNamespace "staging") }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: {{ .Values.migrateEnvVars.cicdNamespace }}
spec:
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 600
      template:
        {{- if .Values.backup.job.imagePullSecret }}
        imagePullSecrets:
        - name: {{ .Values.backup.job.imagePullSecret }}
        {{- else }}
        {{ end -}}
        spec:
          initContainers:
          - name: wait-backup-storage
            image: {{ .Values.backup.job.initContainers.waitBackupStorage.repository }}{{ .Values.backup.job.initContainers.waitBackupStorage.image }}:{{ .Values.backup.job.initContainers.waitBackupStorage.tag }}
            securityContext:
              allowPrivilegeEscalation: false
            command: ['sh', '-c', 'until curl -sSf --insecure https://{{ .Values.backup.job.backupTarget.url }}/minio/health/live > /dev/null; do echo waiting for Minio to start; sleep 5; done;'] #FIXME
            #FIXME for now, use only one minio instance
            #- name: wait-backup-mirror-storage
            #  #yes, it's two times the same imiage with different values
            #  image: {{ .Values.backup.job.initContainers.waitBackupStorage.repository }}{{ .Values.backup.job.initContainers.waitBackupStorage.image }}:{{ .Values.backup.job.initContainers.waitBackupStorage.tag }}
            #  securityContext:
            #    allowPrivilegeEscalation: false
            #  command: ['sh', '-c', 'until curl -sSf https://backup-mirror.parkhands.com/minio/health/live > /dev/null; do echo waiting for Minio to start; sleep 5; done;'] #FIXME
          - name: git-sync
            image: {{ .Values.backup.job.initContainers.gitSync.repository }}{{ .Values.backup.job.initContainers.gitSync.image }}:{{ .Values.backup.job.initContainers.gitSync.tag }}
            securityContext:
              allowPrivilegeEscalation: false
            command: ['sh', '-c']
            args:
              - |
                cd /workdir
                git clone --depth 1 https://$GIT_USERNAME:$GIT_PASSWORD@{{ .Values.migrateEnvVars.gitCloneUrl }} -b {{ .Values.migrateEnvVars.cicdGitBranch }} parkhands
                cd parkhands
                git fetch origin {{ .Values.migrateEnvVars.cicdGitRef }}:pr-1
                git status
            volumeMounts:
            - name: git-source
              mountPath: /workdir
            env:
              - name: GIT_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: github-credentials
                    key: username
              - name: GIT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: github-credentials
                    key: password
          containers:
          - name: postgres-backup
            image: {{ .Values.backup.job.containers.postgresBackup.repository }}{{ .Values.backup.job.containers.postgresBackup.image }}:{{ .Values.backup.job.containers.postgresBackup.tag }}
            securityContext:
              allowPrivilegeEscalation: false
            command: ["/bin/bash", "-c"]
            args:
              - |
                apt-get update > /dev/null
                apt-get install -y python3 > /dev/null
                chmod +x /usr/local/bin/autopgsqlbackup.sh
                /usr/local/bin/./autopgsqlbackup.sh
                touch /tmp/pod/main-terminated
            env:
            - name: DB_ENV
              value: {{ .Values.migrateEnvVars.cicdGitBranch }}
            - name: PGHOST
              valueFrom:
                configMapKeyRef:
                  name: env-configmap
                  key: DB_HOST
            - name: PGDATABASE
              valueFrom:
                configMapKeyRef:
                  name: env-configmap
                  key: DB_NAME
            - name: PGUSER
              valueFrom:
                configMapKeyRef:
                  name: env-configmap
                  key: POSTGRESQL_USERNAME
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: env-secrets
                  key: POSTGRESQL_PASSWORD
            volumeMounts:
            - name: git-source
              mountPath: /usr/local/bin/
              subPath: parkhands/scripts/db/backup/
            - name: backup-dir
              mountPath: /storage
            - name: tmp-pod
              mountPath: /tmp/pod
          - name: copy-backup
            image: {{ .Values.backup.job.containers.copyBackup.repositiory }}{{ .Values.backup.job.containers.copyBackup.image }}:{{ .Values.backup.job.containers.copyBackup.tag }}
            imagePullPolicy: IfNotPresent
            securityContext:
              allowPrivilegeEscalation: false
            command: ["/bin/sh", "-c"]
            args:
              - |
                while [ ! -f /tmp/pod/main-terminated ]; do echo waiting for main pod to terminate; sleep 2; done;
                mc config host add backup https://{{ .Values.backup.job.backupTarget.url }} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --api S3v4 --insecure
                mc mirror /storage/postgresql/postgresql-backups/ backup/{{ .Values.migrateEnvVars.cicdNamespace }}/postgresql/postgresql-backups/
                #FIXME the former configuration below would backup onto two separate minio installations
                #ATTENTION! the former config consistet of two separate installations with separate domains but identical credentials - this needs to be changed!
                #mc config host add backup-mirror https://backup-mirror.parkhands.com ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --api S3v4
                #mc mirror /storage/postgresql/postgresql-backups/ backup-mirror/postgresql/postgresql-backups/production/ --overwrite
                #mc mirror backup-mirror/postgresql/postgresql-backups/production/ backup/postgresql/postgresql-backups/production/ --overwrite --insecure
            env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: env-secrets
                  key: BACKUP_MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: env-secrets
                  key: BACKUP_MINIO_SECRET_KEY
            volumeMounts:
              - name: backup-dir
                mountPath: /storage
                readOnly: true
              - name: tmp-pod
                mountPath: /tmp/pod
                readOnly: true
          restartPolicy: Never
          volumes:
          - name: git-source
            emptyDir: {}
          - name: backup-dir
            emptyDir: {}
          - name: tmp-pod
            emptyDir: {}
{{- end }}
