{
  "name": "parkhands-stack",
  "private": true,
  "version": "1.0.184",
  "scripts": {
    "init-cells": "./scripts/init.sh",
    "backup-db": "./scripts/db/local_db_backup.sh backup",
    "restore-db": "./scripts/db/local_db_backup.sh restore && docker-compose restart graphql organic",
    "show-api-user": "set -a && . ./.env && psql --host localhost --port 5432 app -U postgres -x -c \"select * from api.user;\"",
    "gen-jwt-token": "set -a && . ./.env && ./scripts/dev/generate_jwt_token.sh",
    "query-parking-slots": "set -a && . ./.env && ./scripts/dev/query_parking_slots.sh",
    "stack-up": "npm run stack-up-vanilla-db && sleep 10 && npm run sqitch deploy dev",
    "stack-up-backend": "npm run stack-up",
    "stack-up-vanilla-db": "set -a && . ./.env && docker-compose up -d db-0 graphql organic storage storage-client image-resizer grafana",
    "stack-up-complete": "set -a && . ./.env && docker-compose up -d && npm run sqitch deploy dev",
    "stack-down": "docker-compose down",
    "stack-restart": "npm run stack-down && npm run stack-up",
    "stack-rebuild": "npm run stack-down && docker rmi ph_db ph_graphql ph_organic ph_image_resizer && npm run stack-up",
    "stack-clean": "npm run stack-down && docker rmi ph_db ph_graphql ph_organic ph_image_resizer && docker volume rm ph_postgres-data ph_storage-data ph_grafana-data && npm run stack-up",
    "stack-clean-db": "npm run stack-down && docker volume rm ph_postgres-data && npm run stack-up",
    "stack-clean-storage": "npm run stack-down && docker volume rm ph_storage-data && npm run stack-up",
    "client-dev": "set -a && . ./.env && cd ./web/client && npm run dev",
    "client-build": "set -a && . ./.env && cd ./web/client && npm run build",
    "client-start": "set -a && . ./.env && cd ./web/client && npm run start",
    "admin-dev": "set -a && . ./.env && cd ./web/admin && npm run dev",
    "admin-build": "set -a && . ./.env && cd ./web/admin && npm run build",
    "admin-start": "set -a && . ./.env && cd ./web/admin && npm run start",
    "widget-dev": "set -a && . ./.env && cd ./web/widget && npm run dev",
    "widget-build": "set -a && . ./.env && cd ./web/widget && npm run build",
    "widget-start": "set -a && . ./.env && cd ./web/widget && npm run start",
    "organic-dev-start": "set -a && . ./.env && cd ./organic && npm run dev-start",
    "organic-dev-stop": "set -a && . ./.env && cd ./organic && npm run dev-stop",
    "organic-dev-status": "set -a && . ./.env && cd ./organic && npm run dev-status",
    "stripe-webhook-dev": "set -a && . ./.env && ./scripts/dev/stripe-listen.sh",
    "test": "NODE_ENV=test npm config set script-shell /bin/bash && npm run test-db && npm run test-api && npm run test-organic",
    "test-be": "./scripts/test/test-be.sh",
    "test-db": "set -a && . ./.env && ./scripts/test/test-db.sh sh -c 'pg_prove *.sql'",
    "test-api": "./scripts/test/test-api.sh",
    "test-api-debug": "./scripts/test/test-api-debug.sh",
    "test-api-watch": "./scripts/test/test-api-watch.sh",
    "test-admin-dev": "set -a && . ./.env && cd ./web/admin/test && npm run test-dev",
    "test-admin": "set -a && . ./.env && cd ./web/admin/test && npm run test",
    "test-organic": "set -a && . ./.env && ./scripts/test/test-organic.sh",
    "deploy-staging": ". ./scripts/deploy.sh staging $1",
    "deploy-production": ". ./scripts/deploy.sh production $1",
    "db-export-staging": "./scripts/db/db_export.sh staging",
    "db-export-production": "./scripts/db/db_export.sh production",
    "db-import-local": "./scripts/db/db_import.sh && npm run stack-restart",
    "logs-db": "docker logs --follow --since=2m ph_db",
    "logs-graphql": "docker logs --follow --since=2m ph_graphql",
    "logs-admin": "docker logs --follow --since=2m ph_admin",
    "logs-client": "docker logs --follow --since=2m ph_client",
    "logs-widget": "docker logs --follow --since=2m ph_widget",
    "logs-organic": "docker logs --follow --since=2m ph_organic",
    "logs-image-resizer": "docker logs --follow --since=2m ph_image_resizer",
    "psql": "docker exec -ti ph_db psql -U postgres -d app",
    "sqitch": "set -a && set -a && . ./.env && ./scripts/db/sqitch.sh",
    "sqitch-tag": "set -a && . ./.env && ./scripts/db/sqitch.sh tag --note 'New deployment to server' `git describe --tags --abbrev=0`",
    "schema-reload": "docker restart ph_graphql",
    "graphql-playground": "./scripts/tools/graphql-playground/run.sh",
    "graphql-voyager": "./scripts/tools/graphql-voyager/run.sh",
    "graphql-gen-types": "set -a && . ./.env && cd ./web/shared && npm run generate-types",
    "get-static-files-local": "set -a && . ./.env && cd ./web/client && npm run get-static-files-local"
  },
  "engines": {
    "node": "10.16.3"
  },
  "keywords": [
    "parkhands",
    "organic",
    "express",
    "graphql",
    "websockets",
    "pg"
  ],
  "author": "PH-TEAM",
  "license": "ISC"
}
